{"version":3,"sources":["reportWebVitals.js","components/AddCategory.js","helpers/getGifs.js","components/GridItem.js","components/GifsGrid.js","hooks/useFecthHook.js","GifExpertApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setCategories","useState","inputValue","setInputValue","handleSubmit","e","preventDefault","cate","onSubmit","type","value","onChange","target","className","onClick","getGifs","categories","a","url","encodeURI","fetch","res","json","data","gif","map","img","id","title","images","downsized_medium","GridItem","src","alt","GifsGrid","loading","state","setState","useEffect","imgs","setTimeout","useFecthHook","gifs","key","GifExpertApp","category","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6IAYeA,G,KAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,eCHDQ,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAStCC,EAAe,SAACC,GAClBA,EAAEC,iBACFN,GAAe,SAAAO,GAAI,OAAML,GAAN,mBAAsBK,OACzCJ,EAAc,KAUlB,OACI,qCACA,sBAAMK,SAAUJ,EAAhB,SAEA,uBACIK,KAAK,OACLC,MAAOR,EACPS,SAzBa,SAACN,GAElBF,EAAcE,EAAEO,OAAOF,QAwBnBG,UAAU,iBAGd,wBAAQA,UAAU,aAAaC,QAASV,EAAxC,oBACA,wBAAQS,UAAU,MAAMC,QAlBb,WAEXd,EAAc,KAgBd,wB,+BCtCKe,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,8DACgDC,UAAUH,GAD1D,sDAGDI,MAAMF,GAHL,cAGbG,EAHa,gBAIIA,EAAIC,OAJR,uBAIXC,EAJW,EAIXA,KAEFC,EAAMD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC5B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVnB,kBAaZM,GAbY,4CAAH,sDCGPO,EAAW,SAAC,GAAoB,IAAnBH,EAAkB,EAAlBA,MAASV,GAAS,EAAZS,GAAY,EAATT,KAE/B,OACI,sBAAKL,UAAU,OAAf,UACI,qBAAKmB,IAAKd,EAAKe,IAAKL,IACpB,qBAAKf,UAAU,YAAf,SACI,6BAAOe,UCJVM,EAAW,SAAC,GAAoB,IAAD,ECDhB,SAAClB,GAAgB,IAAD,EACVf,mBAAS,CAC/BsB,KAAM,GACNY,SAAS,IAHuB,mBAC7BC,EAD6B,KACtBC,EADsB,KAqBpC,OAhBAC,qBAAU,WACNvB,EAASC,GACRvB,MAAM,SAAA8C,GACHC,YAAW,WAEPH,EAAS,CACLd,KAAMgB,EACNJ,SAAS,MAId,WAGN,CAACnB,IAECoB,EDjBiBK,CAHY,EAAjBzB,YAGZ0B,EAH6B,EAGlCnB,KAAWY,EAHuB,EAGvBA,QAGnB,OACE,qCAECA,GAAW,sBAAKtB,UAAU,UAAf,UACI,qBAAKA,UAAU,YACf,qBAAKA,UAAU,YACf,qBAAKA,UAAU,eAE5B6B,EAAKjB,KAAI,SAACC,GACT,OAEI,wBAAC,EAAD,2BACIA,GADJ,IAEAiB,IAAKjB,EAAIC,aEpBRiB,EAAe,WAAO,IAAD,EACI3C,mBAAS,CAC3C,SAF8B,mBACzBe,EADyB,KACbhB,EADa,KAOhC,OACE,gCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,EAAegB,WAAYA,IAEvD,uBAECA,EAAWS,KAAI,SAACoB,GACf,OAAO,cAAC,EAAD,CAAyB7B,WAAY6B,GAAtBA,UCb9BC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1B5D,K","file":"static/js/main.4b24df77.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from 'react'\r\nimport '../index.css'\r\n// import PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleChange = (e) =>{\r\n\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        setCategories( cate => [ inputValue , ...cate] )\r\n        setInputValue('')\r\n       \r\n    }\r\n\r\n    const vaciar = () =>{\r\n\r\n        setCategories([]);\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <form onSubmit={handleSubmit}>\r\n\r\n        <input \r\n            type=\"text\"\r\n            value={inputValue}\r\n            onChange={handleChange}\r\n            className=\"form-input\"\r\n        />\r\n        </form>\r\n        <button className=\"btn submit\" onClick={handleSubmit} >buscar</button>\r\n        <button className=\"btn\" onClick={vaciar} >vaciar</button>\r\n        </>\r\n        \r\n    )\r\n}\r\n\r\n","export const getGifs = async (categories) => {\r\n    const url = `https://api.giphy.com/v1/stickers/search?limit=10&q=${encodeURI(categories)}&api_key=W6SHZFqQrCDUWTOQYX8jGjBATonF1Ozn`;\r\n\r\n    const res = await fetch(url);\r\n    const { data } = await res.json();\r\n\r\n    const gif = data.map((img) => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url,\r\n      };\r\n    });\r\n    return gif;\r\n    \r\n  };\r\n","import React from 'react'\r\nimport '../index.css';\r\n\r\nexport const GridItem = ({title,id,url}) => {\r\n    \r\n    return (\r\n        <div className=\"card\">\r\n            <img src={url} alt={title} />\r\n            <div className=\"container\">\r\n                <h4  >{title}</h4>\r\n            </div>\r\n           \r\n        </div>\r\n    )\r\n}\r\n","import { useFecthHook } from \"../hooks/useFecthHook\";\r\nimport { GridItem } from \"./GridItem\";\r\nimport '../index.css';\r\n\r\n\r\nexport const GifsGrid = ({ categories }) => {\r\n  \r\n  \r\n   const {data:gifs, loading} = useFecthHook(categories)\r\n  \r\n  \r\n  return (\r\n    <>\r\n\r\n    {loading && <div className=\"spinner\">\r\n                    <div className=\"bounce1\"></div>\r\n                    <div className=\"bounce2\"></div>\r\n                    <div className=\"bounce3\"></div>\r\n                </div>}\r\n      {gifs.map((img) => {\r\n        return (\r\n        \r\n            <GridItem \r\n            {...img}\r\n            key={img.id}\r\n\r\n            />\r\n        \r\n          \r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n","import { useEffect , useState} from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\nexport const useFecthHook = (categories) => {\r\n        const [state, setState] = useState({\r\n            data: [],\r\n            loading: true\r\n        }) \r\n        useEffect(() => {\r\n            getGifs( categories )\r\n            .then( imgs => {\r\n                setTimeout(() => {\r\n\r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    })\r\n    \r\n                    \r\n                }, 3500);\r\n            })\r\n            \r\n          }, [categories]);\r\n\r\n        return state;\r\n\r\n\r\n}\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifsGrid } from \"./components/GifsGrid\";\r\nexport const GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([\r\n    \"Fast\"\r\n  ]);\r\n\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <h1>GifExpertApp</h1>\r\n      <AddCategory setCategories={setCategories} categories={categories} />\r\n      \r\n      <hr />\r\n\r\n      {categories.map((category) => {\r\n        return <GifsGrid key={category} categories={category} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { GifExpertApp } from './GifExpertApp';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}